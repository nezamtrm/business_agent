# -*- coding: utf-8 -*-
"""business_agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xLgczPLZKR-rR99JGFwOIk1TlxH_1XaY
"""

!pip install -qU langchain langgraph langchain-community
!pip install -qU python-dotenv

from huggingface_hub import notebook_login

notebook_login()

!pip install -qU langchain langgraph langchain-community
!pip install -qU langchain-huggingface

# Define state structure
class AgentState(TypedDict):
    input_data: Dict
    metrics: Optional[Dict]
    recommendations: Optional[Dict]

# Input node: Receive data
def input_node(state: AgentState) -> AgentState:
    print("Executing input_node...")
    input_data = state.get("input_data", {})
    if not input_data:
        raise ValueError("No input data provided")
    print(f"Input data: {input_data}")
    return {"input_data": input_data}

# Processing node: Calculate metrics
def processing_node(state: AgentState) -> AgentState:
    print("Executing processing_node...")
    input_data = state["input_data"]

    # Extract data
    today_revenue = input_data.get("today_revenue", 0)
    today_cost = input_data.get("today_cost", 0)
    today_customers = input_data.get("today_customers", 1)
    prev_revenue = input_data.get("prev_revenue", 0)
    prev_cost = input_data.get("prev_cost", 0)
    prev_customers = input_data.get("prev_customers", 1)

    # Calculate metrics
    profit = today_revenue - today_cost
    cac = today_cost / max(today_customers, 1)
    prev_cac = prev_cost / max(prev_customers, 1)

    revenue_change = ((today_revenue - prev_revenue) / max(prev_revenue, 1)) * 100 if prev_revenue != 0 else 0
    cac_change = ((cac - prev_cac) / max(prev_cac, 1)) * 100 if prev_cac != 0 else 0

    metrics = {
        "profit": profit,
        "cac": cac,
        "revenue_change": revenue_change,
        "cac_change": cac_change
    }
    print(f"Metrics: {metrics}")
    return {"metrics": metrics}

# Recommendation node: Generate recommendations
def recommendation_node(state: AgentState) -> AgentState:
    print("Executing recommendation_node...")
    metrics = state.get("metrics", {})
    if not metrics:
        raise ValueError("No metrics provided")

    profit = metrics.get("profit", 0)
    cac_change = metrics.get("cac_change", 0)
    revenue_change = metrics.get("revenue_change", 0)
    print(f"Profit value: {profit}, CAC Change: {cac_change}, Revenue Change: {revenue_change}")

    # Set up Hugging Face model
    llm = HuggingFaceEndpoint(
        repo_id="google/flan-t5-base",
        temperature=0.7,
        max_new_tokens=512
    )

    # Prompt in English
    prompt = PromptTemplate(
        input_variables=["profit", "cac_change", "revenue_change"],
        template="""
        Based on the following data, provide actionable business recommendations:
        - Daily profit: {profit} IRR
        - Revenue change compared to the previous day: {revenue_change:.2f}%
        - Customer Acquisition Cost (CAC) change: {cac_change:.2f}%

        The recommendations should include:
        - If profit is negative, suggest cost reduction.
        - If CAC has increased by more than 20%, suggest reviewing marketing campaigns.
        - If revenue is growing, suggest increasing the advertising budget.
        """
    )

    try:
        recommendations_text = llm.invoke(prompt.format(
            profit=profit,
            cac_change=cac_change,
            revenue_change=revenue_change
        ))
        print(f"Model response: {recommendations_text}")
    except Exception as e:
        print(f"Error in LLM invocation: {e}")
        recommendations_text = "Unable to generate recommendations due to model error."

    recommendations = {
        "alerts": [],
        "recommendations": []
    }

    # Conditions for alerts and recommendations in English
    if profit < 0:
        recommendations["alerts"].append("Profit is negative!")
        recommendations["recommendations"].append("Reduce costs.")
        print("Added negative profit alert and recommendation")

    if cac_change > 20:
        recommendations["alerts"].append("Customer Acquisition Cost has increased by more than 20%!")
        recommendations["recommendations"].append("Review marketing campaigns.")
        print("Added high CAC alert and recommendation")

    if revenue_change > 0:
        recommendations["recommendations"].append("Increase advertising budget.")
        print("Added revenue growth recommendation")

    recommendations["recommendations"].append(recommendations_text.strip())
    print(f"Recommendations: {recommendations}")
    return {"recommendations": recommendations}

# Define graph
graph = StateGraph(AgentState)
graph.add_node("input", input_node)
graph.add_node("processing", processing_node)
graph.add_node("recommendation", recommendation_node)

graph.add_edge("input", "processing")
graph.add_edge("processing", "recommendation")
graph.add_edge("recommendation", END)

graph.set_entry_point("input")
app = graph.compile()

# Test function
def test_agent():
    test_input = {
        "today_revenue": 1000000,
        "today_cost": 1200000,
        "today_customers": 50,
        "prev_revenue": 800000,
        "prev_cost": 900000,
        "prev_customers": 45
    }

    try:
        result = app.invoke({"input_data": test_input})
        print("Test Result:")
        print(json.dumps(result["recommendations"], indent=2, ensure_ascii=False))

        # Validate output
        assert result["metrics"]["profit"] == -200000, "Profit calculation is incorrect"
        assert result["metrics"]["cac"] == 1200000 / 50, "CAC calculation is incorrect"
        assert "Profit is negative!" in result["recommendations"]["alerts"], "Negative profit alert is missing"
        assert "Reduce costs." in result["recommendations"]["recommendations"], "Cost reduction recommendation is missing"
        print("All tests passed!")
    except Exception as e:
        print(f"Error in graph execution: {e}")
        raise

# Run test
if __name__ == "__main__":
    test_agent()