# -*- coding: utf-8 -*-
"""business_agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xLgczPLZKR-rR99JGFwOIk1TlxH_1XaY
"""

!pip install -qU langchain langgraph langchain-community
!pip install -qU python-dotenv

from huggingface_hub import notebook_login

notebook_login()

!pip install -qU langchain langgraph langchain-community
!pip install -qU langchain-huggingface

import os
import json
from getpass import getpass
from langchain_huggingface import HuggingFaceEndpoint
from langchain.prompts import PromptTemplate

# Set Hugging Face API token
if "HF_API_TOKEN" not in os.environ:
    os.environ["HF_API_TOKEN"] = getpass("Enter your Hugging Face API token: ")

# Function to calculate metrics
def calculate_metrics(input_data: dict) -> dict:
    print("Calculating metrics...")
    if not input_data:
        print("Error: Input data is empty")
        return {"error": "Input data is empty"}

    # Extract data with default values
    today_revenue = input_data.get("today_revenue", 0)
    today_cost = input_data.get("today_cost", 0)
    today_customers = input_data.get("today_customers", 1)
    prev_revenue = input_data.get("prev_revenue", 0)
    prev_cost = input_data.get("prev_cost", 0)
    prev_customers = input_data.get("prev_customers", 1)

    # Calculate metrics
    profit = today_revenue - today_cost
    cac = today_cost / max(today_customers, 1)
    prev_cac = prev_cost / max(prev_customers, 1)

    revenue_change = ((today_revenue - prev_revenue) / max(prev_revenue, 1)) * 100 if prev_revenue != 0 else 0
    cac_change = ((cac - prev_cac) / max(prev_cac, 1)) * 100 if prev_cac != 0 else 0

    metrics = {
        "profit": profit,
        "cac": cac,
        "revenue_change": revenue_change,
        "cac_change": cac_change
    }
    print(f"Metrics calculated: {metrics}")
    return metrics

# Function to generate recommendations
def generate_recommendations(metrics: dict) -> dict:
    print("Generating recommendations...")
    if not metrics or "profit" not in metrics:
        print("Error: Invalid or empty metrics")
        return {
            "profit_loss_status": "Unknown",
            "alerts": ["No metrics provided"],
            "decision_making_recommendations": ["Unable to generate recommendations due to missing metrics"]
        }

    profit = metrics.get("profit", 0)
    cac_change = metrics.get("cac_change", 0)
    revenue_change = metrics.get("revenue_change", 0)
    print(f"Processing: Profit={profit}, CAC Change={cac_change}, Revenue Change={revenue_change}")

    # Initialize recommendations
    recommendations = {
        "profit_loss_status": "Profit" if profit >= 0 else "Loss",
        "alerts": [],
        "decision_making_recommendations": []
    }

    # Set up Hugging Face model
    try:
        llm = HuggingFaceEndpoint(
            repo_id="google/flan-t5-base",
            temperature=0.7,
            max_new_tokens=512
        )
        print("Hugging Face model initialized successfully")
    except Exception as e:
        print(f"Error initializing Hugging Face model: {e}")
        llm = None
        recommendations["alerts"].append("Failed to initialize recommendation model")
        recommendations["decision_making_recommendations"].append("Unable to generate model-based recommendations")

    # Define prompt
    prompt = PromptTemplate(
        input_variables=["profit", "cac_change", "revenue_change"],
        template="""
        Based on the following data, provide actionable business recommendations:
        - Daily profit: {profit} IRR
        - Revenue change compared to the previous day: {revenue_change:.2f}%
        - Customer Acquisition Cost (CAC) change: {cac_change:.2f}%

        The recommendations should include:
        - If profit is negative, suggest cost reduction.
        - If CAC has increased by more than 20%, suggest reviewing marketing campaigns.
        - If revenue is growing, suggest increasing the advertising budget.
        """
    )

    # Generate model recommendations
    recommendations_text = "No additional recommendations from model."
    if llm:
        try:
            recommendations_text = llm.invoke(prompt.format(
                profit=profit,
                cac_change=cac_change,
                revenue_change=revenue_change
            ))
            print(f"Model response: {recommendations_text}")
        except Exception as e:
            print(f"Error in LLM invocation: {e}")
            recommendations_text = "Failed to generate model-based recommendations"

    # Add rule-based alerts and recommendations
    if profit < 0:
        recommendations["alerts"].append("Profit is negative!")
        recommendations["decision_making_recommendations"].append("Reduce costs.")
        print("Added negative profit alert and recommendation")

    if cac_change >= 20:
        recommendations["alerts"].append("Customer Acquisition Cost has increased by more than 20%!")
        recommendations["decision_making_recommendations"].append("Review marketing campaigns.")
        print("Added high CAC alert and recommendation")

    if revenue_change > 0:
        recommendations["decision_making_recommendations"].append("Increase advertising budget.")
        print("Added revenue growth recommendation")

    recommendations["decision_making_recommendations"].append(recommendations_text.strip())
    print(f"Final recommendations: {recommendations}")
    return recommendations

# Main function to process input and produce output
def process_business_data(input_data: dict) -> dict:
    print("Processing business data...")
    if not input_data:
        print("Error: Input data is empty")
        return {
            "profit_loss_status": "Unknown",
            "alerts": ["No input data provided"],
            "decision_making_recommendations": ["Unable to process due to missing input"]
        }

    try:
        metrics = calculate_metrics(input_data)
        if "error" in metrics:
            print(f"Metrics error: {metrics['error']}")
            return {
                "profit_loss_status": "Unknown",
                "alerts": [metrics["error"]],
                "decision_making_recommendations": ["Unable to process due to metrics error"]
            }
        recommendations = generate_recommendations(metrics)
        return recommendations
    except Exception as e:
        print(f"Error in processing: {e}")
        return {
            "profit_loss_status": "Unknown",
            "alerts": [f"Processing error: {str(e)}"],
            "decision_making_recommendations": ["Unable to process due to unexpected error"]
        }

# Test function
def test_agent():
    test_input = {
        "today_revenue": 1000000,
        "today_cost": 1200000,
        "today_customers": 50,
        "prev_revenue": 800000,
        "prev_cost": 900000,
        "prev_customers": 45
    }

    try:
        result = process_business_data(test_input)
        if "error" in result:
            print(f"Error occurred: {result['error']}")
            raise ValueError(result["error"])

        print("Test Result (JSON output):")
        print(json.dumps(result, indent=2, ensure_ascii=False))

        # Validate output
        assert result["profit_loss_status"] == "Loss", "Profit/loss status is incorrect"
        assert "Profit is negative!" in result["alerts"], "Negative profit alert is missing"
        assert "Reduce costs." in result["decision_making_recommendations"], "Cost reduction recommendation is missing"
        assert "Customer Acquisition Cost has increased by more than 20%!" in result["alerts"], "High CAC alert is missing"
        assert "Review marketing campaigns." in result["decision_making_recommendations"], "Marketing campaign recommendation is missing"
        assert "Increase advertising budget." in result["decision_making_recommendations"], "Advertising budget recommendation is missing"
        print("All tests passed!")
        return result
    except Exception as e:
        print(f"Error in test execution: {e}")
        raise

# Run test
if __name__ == "__main__":
    output = test_agent()
    # Save JSON output to file
    try:
        with open("output.json", "w", encoding="utf-8") as f:
            json.dump(output, f, ensure_ascii=False, indent=2)
        print("Output successfully saved to output.json")
    except Exception as e:
        print(f"Error saving output.json: {e}")